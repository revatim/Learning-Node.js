Express.js
    Framework 
    Helps outsource 
    Highly flexible and gives certain way of building applications
    
    Alternatives to Express.js
        Vanilla Node.js (normal server code)
        Adonis.js (laravel inspired)
        Koa
        Sails.js
        ....and so on
        
    const express = require('express');
    can create express application but running express as a funcction - express()
        which will create a new object which is also a valid request handler
        http.createServer(app)  //can do this
        
        it sets up a certain way of handling requests (which is basically why we ae using express.js // a middleware)
        
        app.use( (request, response, next) => {
        
        }) // allows to add new middleware function
        next is a function that has to be executed 
        next(); /* Go to next middleware else it will keep reloading or you can simply send response back*/

        res.send() /* Default response header is text/html */
        
        we are travelling middleware to middleware from top to bottom by simply calling next 
        
        
        const server  = http.createServer(app);
        server.listen(3000)
        
        can basically be replaced by 
        app.listen(3000);
        
Handling different routes
    app.use('/', (req,res,next) => { ... })
    but / here doesnt mean it is the full path ! /app will also enter here
    it has to start with that !
    
    
    req.body is a new feature added in by express.js
    app.use(bodyParser.urlencoded());
    body-parser // npm install
    parser doent work for files etc but works for text
    
    body-parser deprecated undefined extended: provide extended option app.js:7:20
    
    need to set options
        app.use(bodyParser.urlencoded({extended: false}));
        
    req.body gives nice key-value situation :: [Object: null prototype] { title: 'Pen' }
    
    app.use instead we can use app.get or app.post (filter also has options like delete, patch and put)
    
    Outsourcing routes 
        express.Router()
        app.user(that route)
        module.export that route thing
        
    Filtering Routes
        sometimes we have a common starting path 
        /admin/add-product
        app.use('/admin', adminRoutes) so what goes to adminRoutes is add-product 
